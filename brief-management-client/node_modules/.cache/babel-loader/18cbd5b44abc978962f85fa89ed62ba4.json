{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  brief: {},\n  checkoutState: \"LOADING\",\n  errorMessage: \"\"\n};\nexport const getBrief = createAsyncThunk(\"briefs\", async id => {\n  const response = await fetch(`http://localhost:4000/briefs/${id}`);\n  return await response.json();\n});\nconst briefSlice = createSlice({\n  name: \"brief\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getBrief.pending, state => {\n      state.checkoutState = \"LOADING\";\n    });\n    builder.addCase(getBrief.fulfilled, (state, action) => {\n      state.checkoutState = \"READY\";\n      state.brief = action.payload;\n    });\n    builder.addCase(getBrief.rejected, (state, action) => {\n      state.checkoutState = \"ERROR\";\n      state.errorMessage = action.error.message || \"\";\n    });\n  }\n});\nexport default briefSlice.reducer;","map":{"version":3,"sources":["/home/franck/brief-management/brief-management-client/src/features/briefs/briefSlice.ts"],"names":["createAsyncThunk","createSlice","initialState","brief","checkoutState","errorMessage","getBrief","id","response","fetch","json","briefSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","error","message","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAgBA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,EADwB;AAE/BC,EAAAA,aAAa,EAAE,SAFgB;AAG/BC,EAAAA,YAAY,EAAE;AAHiB,CAAjC;AAMA,OAAO,MAAMC,QAAQ,GAAGN,gBAAgB,CAAC,QAAD,EAAW,MAAOO,EAAP,IAAsB;AACvE,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BF,EAAG,EAApC,CAA5B;AACA,SAAQ,MAAMC,QAAQ,CAACE,IAAT,EAAd;AACD,CAHuC,CAAjC;AAKP,MAAMC,UAAU,GAAGV,WAAW,CAAC;AAC7BW,EAAAA,IAAI,EAAE,OADuB;AAE7BV,EAAAA,YAF6B;AAG7BW,EAAAA,QAAQ,EAAE,EAHmB;AAI7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBV,QAAQ,CAACW,OAAzB,EAAmCC,KAAD,IAAW;AAC3CA,MAAAA,KAAK,CAACd,aAAN,GAAsB,SAAtB;AACD,KAFD;AAGAW,IAAAA,OAAO,CAACC,OAAR,CAAgBV,QAAQ,CAACa,SAAzB,EAAoC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACrDF,MAAAA,KAAK,CAACd,aAAN,GAAsB,OAAtB;AACAc,MAAAA,KAAK,CAACf,KAAN,GAAciB,MAAM,CAACC,OAArB;AACD,KAHD;AAIAN,IAAAA,OAAO,CAACC,OAAR,CAAgBV,QAAQ,CAACgB,QAAzB,EAAmC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACpDF,MAAAA,KAAK,CAACd,aAAN,GAAsB,OAAtB;AACAc,MAAAA,KAAK,CAACb,YAAN,GAAqBe,MAAM,CAACG,KAAP,CAAaC,OAAb,IAAwB,EAA7C;AACD,KAHD;AAID;AAhB4B,CAAD,CAA9B;AAmBA,eAAeb,UAAU,CAACc,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { CheckoutState } from \"../../shared/api/constant\";\n\nexport interface Brief {\n  id: number;\n  title: string;\n  comment: string;\n  productId: number;\n}\n\nexport interface BriefState {\n  brief: Brief;\n  checkoutState: CheckoutState;\n  errorMessage: string;\n}\n\nconst initialState: BriefState = {\n  brief: {} as Brief,\n  checkoutState: \"LOADING\",\n  errorMessage: \"\",\n};\n\nexport const getBrief = createAsyncThunk(\"briefs\", async (id: string) => {\n  const response = await fetch(`http://localhost:4000/briefs/${id}`);\n  return (await response.json()) as Brief;\n});\n\nconst briefSlice = createSlice({\n  name: \"brief\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getBrief.pending, (state) => {\n      state.checkoutState = \"LOADING\";\n    });\n    builder.addCase(getBrief.fulfilled, (state, action) => {\n      state.checkoutState = \"READY\";\n      state.brief = action.payload;\n    });\n    builder.addCase(getBrief.rejected, (state, action) => {\n      state.checkoutState = \"ERROR\";\n      state.errorMessage = action.error.message || \"\";\n    });\n  },\n});\n\nexport default briefSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}